{
  "name": "secondary-explorer",
  "displayName": "Secondary Explorer",
  "description": "Adds a secondary explorer view to manage files and folders outside the default workspace explorer.",
  "version": "4.0.0",
  "icon": "images/logo.png",
  "publisher": "Thinker",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/R35007/secondary-explorer-vscode-extension"
  },
  "author": {
    "name": "Sivaraman",
    "email": "sendmsg2siva@gmail.com"
  },
  "keywords": [
    "vscode",
    "explorer",
    "file",
    "folder",
    "notes",
    "side-notes",
    "file-system",
    "file-management",
    "file-explorer",
    "file-browser",
    "file-tree",
    "file-viewer",
    "file-organizer",
    "file-navigator",
    "file-operations",
    "secondary-explorer"
  ],
  "engines": {
    "vscode": "^1.103.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onStartupFinished"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "configuration": {
      "type": "object",
      "title": "Secondary Explorer",
      "properties": {
        "secondaryExplorer.paths": {
          "type": "array",
          "description": "List of local file or folder paths to show in the Secondary Explorer (workspace-level recommended). Only existing files and folders will be shown.",
          "items": {
            "type": "string"
          },
          "default": []
        }
      }
    },
    "views": {
      "explorer": [
        {
          "id": "secondaryExplorerView",
          "name": "Secondary Explorer",
          "icon": "./images/explorer-icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "secondaryExplorerView",
        "contents": "No paths configured.\n[Add Folder to Explorer](command:secondary-explorer.pickPath)",
        "when": "!secondaryExplorer.paths || secondaryExplorer.paths.length == 0"
      }
    ],
    "commands": [
      {
        "command": "secondary-explorer.refresh",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "secondary-explorer.pickPath",
        "title": "Add Folder to Explorer",
        "icon": "$(new-folder)"
      },
      {
        "command": "secondary-explorer.openSettings",
        "title": "Settings",
        "icon": "$(gear)"
      },
      {
        "command": "secondary-explorer.createEntry",
        "title": "Create New File/Folder",
        "icon": "$(new-file)"
      },
      {
        "command": "secondary-explorer.deleteEntry",
        "title": "Delete",
        "icon": "$(trash)"
      },
      {
        "command": "secondary-explorer.renameEntry",
        "title": "Rename",
        "icon": "$(edit)"
      },
      {
        "command": "secondary-explorer.openFile",
        "title": "Open File",
        "icon": "$(eye)"
      },
      {
        "command": "secondary-explorer.openFolderInNewWindow",
        "title": "Open in New Window",
        "icon": "$(link-external)"
      },
      {
        "command": "secondary-explorer.cutEntry",
        "title": "Cut",
        "icon": "$(cut)"
      },
      {
        "command": "secondary-explorer.copyEntry",
        "title": "Copy",
        "icon": "$(copy)"
      },
      {
        "command": "secondary-explorer.pasteEntry",
        "title": "Paste",
        "icon": "$(paste)"
      },
      {
        "command": "secondary-explorer.revealInFileExplorer",
        "title": "Reveal in File Explorer",
        "icon": "$(file-directory)"
      },
      {
        "command": "secondary-explorer.copyPath",
        "title": "Copy Path",
        "icon": "$(clippy)"
      },
      {
        "command": "secondary-explorer.copyRelativePath",
        "title": "Copy Relative Path",
        "icon": "$(clippy)"
      },
      {
        "command": "secondary-explorer.removePath",
        "title": "Remove From Explorer",
        "icon": "$(trash)"
      },
      {
        "command": "secondary-explorer.openInTerminal",
        "title": "Open in Integrated Terminal",
        "icon": "$(terminal)"
      },
      {
        "command": "secondary-explorer.addToSecondaryExplorer",
        "title": "Add to Secondary Explorer",
        "icon": "$(add)"
      }
    ],
    "menus": {
      "commandPalette": [
        {
          "command": "secondary-explorer.refresh",
          "when": "false"
        },
        {
          "command": "secondary-explorer.pickPath",
          "when": "false"
        },
        {
          "command": "secondary-explorer.openSettings",
          "when": "false"
        },
        {
          "command": "secondary-explorer.createEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.deleteEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.renameEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.openFile",
          "when": "false"
        },
        {
          "command": "secondary-explorer.openFolderInNewWindow",
          "when": "false"
        },
        {
          "command": "secondary-explorer.cutEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.copyEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.pasteEntry",
          "when": "false"
        },
        {
          "command": "secondary-explorer.revealInFileExplorer",
          "when": "false"
        },
        {
          "command": "secondary-explorer.copyPath",
          "when": "false"
        },
        {
          "command": "secondary-explorer.copyRelativePath",
          "when": "false"
        },
        {
          "command": "secondary-explorer.removePath",
          "when": "false"
        }
      ],
      "explorer/context": [
        {
          "command": "secondary-explorer.addToSecondaryExplorer",
          "group": "navigation@1"
        }
      ],
      "view/item/context": [
        {
          "command": "secondary-explorer.removePath",
          "when": "view == secondaryExplorerView && viewItem == root",
          "group": "navigation@1"
        },
        {
          "command": "secondary-explorer.openFile",
          "when": "view == secondaryExplorerView && viewItem == file",
          "group": "navigation@2"
        },
        {
          "command": "secondary-explorer.openInTerminal",
          "when": "view == secondaryExplorerView",
          "group": "navigation@2"
        },
        {
          "command": "secondary-explorer.cutEntry",
          "when": "view == secondaryExplorerView && (viewItem == file || viewItem == folder)",
          "group": "navigation@3"
        },
        {
          "command": "secondary-explorer.copyEntry",
          "when": "view == secondaryExplorerView && (viewItem == file || viewItem == folder)",
          "group": "navigation@4"
        },
        {
          "command": "secondary-explorer.copyPath",
          "when": "view == secondaryExplorerView",
          "group": "navigation@5"
        },
        {
          "command": "secondary-explorer.copyRelativePath",
          "when": "view == secondaryExplorerView",
          "group": "navigation@6"
        },
        {
          "command": "secondary-explorer.pasteEntry",
          "when": "view == secondaryExplorerView && (viewItem == file || viewItem == folder)",
          "group": "navigation@7"
        },
        {
          "command": "secondary-explorer.renameEntry",
          "when": "view == secondaryExplorerView && (viewItem == file || viewItem == folder)",
          "group": "navigation@8"
        },
        {
          "command": "secondary-explorer.deleteEntry",
          "when": "view == secondaryExplorerView && (viewItem == file || viewItem == folder)",
          "group": "navigation@9"
        },
        {
          "command": "secondary-explorer.revealInFileExplorer",
          "when": "view == secondaryExplorerView",
          "group": "navigation@10"
        }
      ],
      "view/title": [
        {
          "command": "secondary-explorer.createEntry",
          "when": "view == secondaryExplorerView && (secondaryExplorerSelectedType == 'file' || secondaryExplorerSelectedType == 'folder') && !(secondaryExplorerSelectedType == 'file' && secondaryExplorerSelectedIsRoot)",
          "group": "navigation@1"
        },
        {
          "command": "secondary-explorer.pickPath",
          "when": "view == secondaryExplorerView",
          "group": "navigation@4"
        },
        {
          "command": "secondary-explorer.openFolderInNewWindow",
          "when": "view == secondaryExplorerView && (secondaryExplorerSelectedType == 'file' || secondaryExplorerSelectedType == 'folder')",
          "group": "navigation@5"
        },
        {
          "command": "secondary-explorer.openSettings",
          "when": "view == secondaryExplorerView",
          "group": "navigation@6"
        },
        {
          "command": "secondary-explorer.refresh",
          "when": "view == secondaryExplorerView",
          "group": "navigation@7"
        }
      ]
    },
    "keybindings": [
      {
        "command": "secondary-explorer.deleteEntry",
        "key": "delete",
        "when": "focusedView == secondaryExplorerView && secondaryExplorerHasSelection && !inputFocus"
      },
      {
        "command": "secondary-explorer.cutEntry",
        "key": "ctrl+x",
        "when": "focusedView == secondaryExplorerView && secondaryExplorerHasSelection && !inputFocus"
      },
      {
        "command": "secondary-explorer.copyEntry",
        "key": "ctrl+c",
        "when": "focusedView == secondaryExplorerView && secondaryExplorerHasSelection && !inputFocus"
      },
      {
        "command": "secondary-explorer.pasteEntry",
        "key": "ctrl+v",
        "when": "focusedView == secondaryExplorerView && secondaryExplorerHasSelection && !inputFocus"
      },
      {
        "command": "secondary-explorer.renameEntry",
        "key": "f2",
        "when": "focusedView == secondaryExplorerView && secondaryExplorerHasSelection && !inputFocus"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src",
    "format": "prettier --write .",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.100.0",
    "@typescript-eslint/eslint-plugin": "^8.39.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "eslint": "^9.32.0",
    "eslint-config-prettier": "^10.1.8",
    "eslint-plugin-prettier": "^5.5.4",
    "prettier": "^3.6.2",
    "ts-loader": "^9.5.2",
    "typescript": "^5.9.2",
    "webpack": "^5.101.0",
    "webpack-cli": "^6.0.1"
  },
  "dependencies": {
    "@types/fs-extra": "^11.0.4",
    "fs-extra": "^11.3.1"
  }
}
